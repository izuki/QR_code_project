/*======================================================================*/
/* File Name    : qr.h                                                  */
/* Component    : QR Code                                               */
/* Author       : $Author: Sato_t $                                     */
/* Mail         :                                                       */
/* Date         : $Date: XX/XX/XX XX:XX $                               */
/* Revision     : $Revision: 0 $                                        */
/* Design Doc   :                                                       */
/* Unpublished Copyright.                                               */
/*======================================================================*/
#ifndef __QR_MAKE__
#define __QR_MAKE__

#include "type.h"

/************************************************************************/
/* マクロ定義                                                           */
/************************************************************************/
#define WHITE_MODULE        (0x00)  /* 明モジュール */
#define BLACK_MODULE        (0xFF)  /* 暗モジュール */
#define DATA_MODULE         (0xAA)  /* データモジュール */
#define INFO_MODULE         (0x80)  /* 形式情報モジュール */
#define RESERVE_MODULE      (0x80)  /* 予約領域 */

/* QRコード型番 */
#define QR_VERSION_MIN      (1)     /* 最小値(固定) */
#define QR_VERSION_MAX      (40)    /* 最大値(固定) */

/* QRモード指定子 */
#define NUM_MODE_DSCRPT     (BIT1)  /* 数字モード       */
#define AN_MODE_DSCRPT      (BIT2)  /* 英数字モード     */
#define BYTE_MODE_DSCRPT    (BIT3)  /* 8Bitバイトモード */
#define KANJI_MODE_DSCRPT   (BIT4)  /* 漢字モード       */

#if 0
/* 1シンボル当たりのブロックサイズ */
#define SYMBOL_PER_BLOCK(bit)   ( (1 << bit) - 1 )

/* シンボルの最大サイズ */

#define SYMBOL_BIT_MAX(Model, QRecLevel)    ( QRcodeInfo[Model-1].DataSize[QRecLevel].DataBitMax )

#define SYMBOL_NUM_MAX(Model, QRecLevel)           ( _qr_string_length[Model][QRecLevel].NumCode )
#define SYMBOL_AN_MAX(Model, QRecLevel)            ( _qr_string_length[Model][QRecLevel].AnCode )
#define SYMBOL_BINARY_MAX(Model, QRecLevel)        ( _qr_string_length[Model][QRecLevel].BinaryCode )
#define SYMBOL_KANJI_MAX(Model, QRecLevel)         ( _qr_string_length[Model][QRecLevel].KanjiCode )
#endif

/************************************************************************/
/* 列挙体・構造体定義													*/
/************************************************************************/
/* QRモード種別 */
typedef enum __tagQrMode{
    QR_MODE_NUL = -1,
    QR_MODE_NUM     ,
    QR_MODE_AN      ,
    QR_MODE_BYTE    ,
    QR_MODE_KANJI   ,
    QR_MODE_MAX     ,
}QR_MODE_N;

/* 誤り訂正レベル */
typedef enum __tagEcclv{
    QR_ECLEVEL_NUL = -1 ,
    QR_ECLEVEL_L        , // 低い
    QR_ECLEVEL_M        ,
    QR_ECLEVEL_Q        ,
    QR_ECLEVEL_H        , // 高い
    QR_ECLEVEL_MAX      ,
}QR_ECLEVEL_N;


/* 最大格納可能文字数 */
typedef struct{
    UINT32 AllDataCapCode;  /* 全データ容量コード語(語数)          *//* data_capacity_code_num と同じ */
    UINT32 DataCode;        /* データコード語(語数)                */
    UINT32 ECCode;          /* 誤り訂正コード語(語数)              */
    UINT32 DataBitCode;     /* データコード語ビット(ビット数)      */
    UINT32 NumCode;         /* 最大格納可能文字数－数字(文字数)    */
    UINT32 AnCode;          /* 最大格納可能文字数－英数字(文字数)  */
    UINT32 BinaryCode;      /* 最大格納可能文字数－8ビット(文字数) */
    UINT32 KanjiCode;       /* 最大格納可能文字数－漢字(文字数)    */
}QR_STRING_LENGTH_T, *PQR_STRING_LENGTH_T;

/* QRコードの全型番のデータ容量 */
typedef struct{
    UINT32 ver;                             /* (A) QRコード型番                              */
    UINT32 side_module_num;                 /* (B) １辺のモジュール数                        */
    UINT32 all_module_num;                  /* (C) 全モジュール数                            */
    UINT32 pos_search_pattern_module_num;   /* (D) 位置検出パターンモジュール数              */
    UINT32 separation_pattern_module_num;   /* (E) 位置検出パターンの分離パターンモジュール数*/
    UINT32 timing_pattern_module_num;       /* (F) タイミングパターンモジュール数            */
    UINT32 pos_laying_pattern_module_num;   /* (G) 位置合せパターンモジュール数              */
    UINT32 pos_laying_pattern_num;          /* (H) 位置合せパターン数                        */
    UINT32 pos_laying_and_timing_same_num;  /* (I) 位置合せパターンがタイミングパターンと重なる数*/
    UINT32 function_pattern_module_sum;     /* (J) 機能パターンモジュール数合計                  */
    UINT32 form_information_module_num;     /* (K) 形式情報モジュール数                          */
    UINT32 ver_info_module_num;             /* (L) 型番情報モジュール数                      */
    UINT32 especially_dark_module_num;      /* (M) 特別暗モジュール数?                       */
    UINT32 data_capacity_bits_num;          /* (N) データ容量ビット数                        */
    UINT32 data_capacity_code_num;          /* (O) データ容量コード(語数)(byte)              */
    UINT32 leftover_bits_num;               /* (P) 残余ビット数                              */
}QR_CODE_INFO_T, *PQR_CODE_INFO_T;

typedef struct __tagQRPram{
    UINT32 data_value;
    UINT32 data_bits;
}QR_PARAM;


/************************************************************************/
/* 固定値設定()													*/
/************************************************************************/

static const QR_STRING_LENGTH_T _qr_string_length[QR_VERSION_MAX+1][QR_ECLEVEL_MAX] = {
{	/* Dummy */
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
},{	/* Version 1 */
	{26,19,7,152,41,25,17,10},
	{26,16,10,128,34,20,14,8},
	{26,13,13,104,27,16,11,7},
	{26, 9,17,72,17,10,7,4},
},{	/* Version 2 */
	{44,34,10,272,77,47,32,20},
	{44,28,16,224,63,38,26,16},
	{44,22,22,176,48,29,20,12},
	{44,16,28,128,34,20,14,8},
},{	/* Version 3 */
	{70,55,15,440,127,77,53,32},
	{70,44,26,352,101,61,42,26},
	{70,34,36,272,77,47,32,20},
	{70,26,44,208,58,35,24,15},
},{	/* Version 4 */
	{100,80,20,640,187,114,78,48},
	{100,64,36,512,149,90,62,38},
	{100,48,52,384,111,67,46,28},
	{100,36,64,288,82,50,34,21},
},{	/* Version 5 */
	{134,108,26,864,255,154,106,65},
	{134,86,48,688,202,122,84,52},
	{134,62,72,496,144,87,60,37},
	{134,46,88,368,106,64,44,27},
},{	/* Version 6 */
	{172,136,36,1088,322,195,134,82},
	{172,108,64,864,255,154,106,65},
	{172,76,96,608,178,108,74,45},
	{172,60,112,480,139,84,58,36},
},{	/* Version 7 */
	{196,156,40,1248,370,224,154,95},
	{196,124,72,992,293,178,122,75},
	{196,88,108,704,207,125,86,53},
	{196,66,130,528,154,93,64,39},
},{	/* Version 8 */
	{242,194,48,1552,461,279,192,118},
	{242,154,88,1232,365,221,152,93},
	{242,110,132,880,259,157,108,66},
	{242,86,156,688,202,122,84,52},
},{	/* Version 9 */
	{292,232,60,1856,552,335,230,141},
	{292,182,110,1456,432,262,180,111},
	{292,132,160,1056,312,189,130,80},
	{292,100,192,800,235,143,98,60},
},{	/* Version 10 */
	{346,274,72,2192,652,395,271,167},
	{346,216,130,1728,513,311,213,131},
	{346,154,192,1232,364,221,151,93},
	{346,122,224,976,288,174,119,74},
},{	/* Version 11 */
	{404,324,80,2592,772,468,321,198},
	{404,254,150,2032,604,366,251,155},
	{404,180,224,1440,427,259,177,109},
	{404,140,264,1120,331,200,137,85},
},{	/* Version 12 */
	{466,370,96,2960,883,535,367,226},
	{466,290,176,2320,691,419,287,177},
	{466,206,260,1648,489,296,203,125},
	{466,158,308,1264,374,227,155,96},
},{	/* Version 13 */
	{532,428,104,3424,1022,619,425,262},
	{532,334,198,2672,796,483,331,204},
	{532,244,288,1952,580,352,241,149},
	{532,180,352,1440,427,259,177,109},
},{	/* Version 14 */
	{581,461,120,3688,1101,667,458,282},
	{581,365,216,2920,871,528,362,223},
	{581,261,320,2088,621,376,258,159},
	{581,197,384,1576,468,283,194,120},
},{	/* Version 15 */
	{655,523,132,4184,1250,758,520,320},
	{655,415,240,3320,991,600,412,254},
	{655,295,360,2360,703,426,292,180},
	{655,223,432,1784,530,321,220,136},
},{	/* Version 16 */
	{733,589,144,4712,1408,854,586,361},
	{733,453,280,3624,1082,656,450,277},
	{733,325,408,2600,775,470,322,198},
	{733,253,480,2024,602,365,250,154},
},{	/* Version 17 */
	{815,647,168,5176,1548,938,644,397},
	{815,507,308,4056,1212,734,504,310},
	{815,367,448,2936,876,531,364,224},
	{815,283,532,2264,674,408,280,173},
},{	/* Version 18 */
	{901,721,180,5768,1725,1046,718,442},
	{901,563,338,4504,1346,816,560,345},
	{901,397,504,3176,948,574,394,243},
	{901,313,588,2504,746,452,310,191},
},{	/* Version 19 */
	{991,795,196,6360,1903,1153,792,488},
	{991,627,364,5016,1500,909,624,384},
	{991,445,546,3560,1063,644,442,272},
	{991,341,650,2728,813,493,338,208},
},{	/* Version 20 */
	{1085,861,224,6888,2061,1249,858,528},
	{1085,669,416,5352,1600,970,666,410},
	{1085,485,600,3880,1159,702,482,297},
	{1085,385,700,3080,919,557,382,235},
},{	/* Version  */
	{1156,932,224,7456,2232,1352,929,572},
	{1156,714,442,5712,1708,1035,711,438},
	{1156,512,644,4096,1224,742,509,314},
	{1156,406,750,3248,969,587,403,248},
},{	/* Version  */
	{1258,1006,252,8048,2409,1460,1003,618},
	{1258,782,476,6256,1872,1134,779,480},
	{1258,568,690,4544,1358,823,565,348},
	{1258,442,816,3536,1056,640,439,270},
},{	/* Version  */
	{1364,1094,270,8752,2620,1588,1091,672},
	{1364,860,504,6880,2059,1248,857,528},
	{1364,614,750,4912,1468,890,611,376},
	{1364,464,900,3712,1108,672,461,284},
},{	/* Version  */
	{1474,1174,300,9392,2812,1704,1171,721},
	{1474,914,560,7312,2188,1326,911,561},
	{1474,664,810,5312,1588,963,661,407},
	{1474,514,960,4112,1228,744,511,315},
},{	/* Version 25 */
	{1588,1276,312,10208,3057,1853,1273,784},
	{1588,1000,588,8000,2395,1451,997,614},
	{1588,718,870,5744,1718,1041,715,440},
	{1588,538,1050,4304,1286,779,535,330},
},{	/* Version  */
	{1706,1370,336,10960,3283,1990,1367,842},
	{1706,1062,644,8496,2544,1542,1059,652},
	{1706,754,952,6032,1804,1094,751,462},
	{1706,596,1110,4768,1425,864,593,365},
},{	/* Version  */
	{1828,1468,360,11744,3517,2132,1465,902},
	{1828,1128,700,9024,2701,1637,1125,692},
	{1828,808,1020,6464,1933,1172,805,496},
	{1828,628,1200,5024,1501,910,625,385},
},{	/* Version  */
	{1921,1531,390,12248,3669,2223,1528,940},
	{1921,1193,728,9544,2857,1732,1190,732},
	{1921,871,1050,6968,2085,1263,868,534},
	{1921,661,1260,5288,1581,958,658,405},
},{	/* Version  */
	{2051,1631,420,13048,3909,2369,1628,1002},
	{2051,1267,784,10136,3035,1839,1264,778},
	{2051,911,1140,7288,2181,1322,908,559},
	{2051,701,1350,5608,1677,1016,698,430},
},{	/* Version 30 */
	{2185,1735,450,13880,4158,2520,1732,1066},
	{2185,1373,812,10984,3289,1994,1370,843},
	{2185,985,1200,7880,2358,1429,982,604},
	{2185,745,1440,5960,1782,1080,742,457},
},{	/* Version  */
	{2323,1843,480,14744,4417,2677,1840,1132},
	{2323,1455,868,11640,3486,2113,1452,894},
	{2323,1033,1290,8264,2473,1499,1030,634},
	{2323,793,1530,6344,1897,1150,790,486},
},{	/* Version  */
	{2465,1955,510,15640,4686,2840,1952,1201},
	{2465,1541,924,12328,3693,2238,1538,947},
	{2465,1115,1350,8920,2670,1618,1112,684},
	{2465,845,1620,6760,2022,1226,842,518},
},{	/* Version  */
	{2611,2071,540,16568,4965,3009,2068,1273},
	{2611,1631,980,13048,3909,2369,1628,1002},
	{2611,1171,1440,9368,2805,1700,1168,719},
	{2611,901,1710,7208,2157,1307,898,553},
},{	/* Version  */
	{2761,2191,570,17528,5253,3183,2188,1347},
	{2761,1725,1036,13800,4134,2506,1722,1060},
	{2761,1231,1530,9848,2949,1787,1228,756},
	{2761,961,1800,7688,2301,1394,958,590},
},{	/* Version 35 */
	{2876,2306,570,18448,5529,3351,2303,1417},
	{2876,1812,1064,14496,4343,2632,1809,1113},
	{2876,1286,1590,10288,3081,1867,1283,790},
	{2876,986,1890,7888,2361,1431,983,605},
},{	/* Version  */
	{3034,2434,600,19472,5836,3537,2431,1496},
	{3034,1914,1120,15312,4588,2780,1911,1176},
	{3034,1354,1680,10832,3244,1966,1351,832},
	{3034,1054,1980,8432,2524,1530,1051,647},
},{	/* Version  */
	{3196,2566,630,20528,6153,3729,2563,1577},
	{3196,1992,1204,15936,4775,2894,1989,1224},
	{3196,1426,1770,11408,3417,2071,1423,876},
	{3196,1096,2100,8768,2625,1591,1093,673},
},{	/* Version  */
	{3362,2702,660,21616,6479,3927,2699,1661},
	{3362,2102,1260,16816,5039,3054,2099,1292},
	{3362,1502,1860,12016,3599,2181,1499,923},
	{3362,1142,2220,9136,2735,1658,1139,701},
},{	/* Version  */
	{3532,2812,720,22496,6743,4087,2809,1729},
	{3532,2216,1316,17728,5313,3220,2213,1362},
	{3532,1582,1950,12656,3791,2298,1579,972},
	{3532,1222,2310,9776,2927,1774,1219,750},
},{	/* Version 40 */
	{3706,2956,750,23648,7089,4296,2953,1817},
	{3706,2334,1372,18672,5596,3391,2331,1435},
	{3706,1666,2040,13328,3993,2420,1663,1024},
	{3706,1276,2430,10208,3057,1852,1273,784},
   }
};



/* 添字[0]は使用しない */
 static const QR_CODE_INFO_T _qr_code_info[QR_VERSION_MAX+1] = {
/*	 (A)	(B)      (C)     (D)    (E)     (F)    (G)    (H)  (I)  (J)    (K) (L) (M)  (N)     (O)    (P) */
	{ 0,	 0,		  0,	  0,	 0,		 0,		0,		0,	0,	  0,	 0,	0,	0,	  0,	 0,		0 },//Dummy
	{ 1,	21,		441,	147,	45,		10,		0,		0,	0,	202,	30,	0,	1,	208,	26,		0 },/* Version 1  */
	{ 2,	25,		625,	147,	45,		18,		25,		1,	0,	235,	30,	0,	1,	359,	44,		7 },/* Version 2  */
	{ 3,	29,		841,	147,	45,		26,		25,		1,	0,	243,	30,	0,	1,	567,	70,		7 },/* Version 3  */
	{ 4,	33,		1089,	147,	45,		34,		25,		1,	0,	251,	30,	0,	1,	807,	100,	7 },/* Version 4  */
	{ 5,	37,		1369,	147,	45,		42,		25,		1,	0,	259,	30,	0,	1,	1079,	134,	7 },/* Version 5  */
	{ 6,	41,		1681,	147,	45,		50,		25,		1,	0,	267,	30,	0,	1,	1383,	172,	7 },/* Version 6  */
	{ 7,	45,		2025,	147,	45,		58,		140,	6,	2,	390,	30,	36,	1,	1568,	196,	0 },/* Version 7  */
	{ 8,	49,		2401,	147,	45,		66,		140,	6,	2,	398,	30,	36,	1,	1936,	242,	0 },/* Version 8  */
	{ 9,	53,		2809,	147,	45,		74,		140,	6,	2,	406,	30,	36,	1,	2336,	292,	0 },/* Version 9  */
	{ 10,	57,		3249,	147,	45,		82,		140,	6,	2,	414,	30,	36,	1,	2768,	346,	0 },/* Version 10 */
	{ 11,	61,		3721,	147,	45,		90,		140,	6,	2,	422,	30,	36,	1,	3232,	404,	0 },/* Version 11 */
	{ 12,	65,		4225,	147,	45,		98,		140,	6,	2,	430,	30,	36,	1,	3728,	466,	0 },/* Version 12 */
	{ 13,	69,		4761,	147,	45,		106,	140,	6,	2,	438,	30,	36,	1,	4256,	532,	0 },/* Version 13 */
	{ 14,	73,		5329,	147,	45,		114,	305,	13,	4,	611,	30,	36,	1,	4651,	581,	3 },/* Version 14 */
	{ 15,	77,		5929,	147,	45,		122,	305,	13,	4,	619,	30,	36,	1,	5243,	655,	3 },/* Version 15 */
	{ 16,	81,		6561,	147,	45,		130,	305,	13,	4,	627,	30,	36,	1,	5867,	733,	3 },/* Version 16 */
	{ 17,	85,		7225,	147,	45,		138,	305,	13,	4,	635,	30,	36,	1,	6523,	815,	3 },/* Version 17 */
	{ 18,	89,		7921,	147,	45,		146,	305,	13,	4,	643,	30,	36,	1,	7211,	901,	3 },/* Version 18 */
	{ 19,	93,		8649,	147,	45,		154,	305,	13,	4,	651,	30,	36,	1,	7931,	991,	3 },/* Version 19 */
	{ 20,	97,		9409,	147,	45,		162,	305,	13,	4,	659,	30,	36,	1,	8683,	1085,	3 },/* Version 20 */
	{ 21,	101,	10201,	147,	45,		170,	520,	22,	6,	882,	30,	36,	1,	9252,	1156,	4 },/* Version 21 */
	{ 22,	105,	11025,	147,	45,		178,	520,	22,	6,	890,	30,	36,	1,	10068,	1258,	4 },/* Version 22 */
	{ 23,	109,	11881,	147,	45,		186,	520,	22,	6,	898,	30,	36,	1,	10916,	1364,	4 },/* Version 23 */
	{ 24,	113,	12769,	147,	45,		194,	520,	22,	6,	906,	30,	36,	1,	11796,	1474,	4 },/* Version 24 */
	{ 25,	117,	13689,	147,	45,		202,	520,	22,	6,	914,	30,	36,	1,	12708,	1588,	4 },/* Version 25 */
	{ 26,	121,	14641,	147,	45,		210,	520,	22,	6,	922,	30,	36,	1,	13652,	1706,	4 },/* Version 26 */
	{ 27,	125,	15625,	147,	45,		218,	520,	22,	6,	930,	30,	36,	1,	14628,	1828,	4 },/* Version 27 */
	{ 28,	129,	16641,	147,	45,		226,	785,	33,	8,	1203,	30,	36,	1,	15371,	1921,	3 },/* Version 28 */
	{ 29,	133,	17689,	147,	45,		234,	785,	33,	8,	1211,	30,	36,	1,	16411,	2051,	3 },/* Version 29 */
	{ 30,	137,	18769,	147,	45,		242,	785,	33,	8,	1219,	30,	36,	1,	17483,	2185,	3 },/* Version 30 */
	{ 31,	141,	19881,	147,	45,		250,	785,	33,	8,	1227,	30,	36,	1,	18587,	2323,	3 },/* Version 31 */
	{ 32,	145,	21025,	147,	45,		258,	785,	33,	8,	1235,	30,	36,	1,	19723,	2465,	3 },/* Version 32 */
	{ 33,	149,	22201,	147,	45,		266,	785,	33,	8,	1243,	30,	36,	1,	20891,	2611,	3 },/* Version 33 */
	{ 34,	153,	23409,	147,	45,		274,	785,	33,	8,	1251,	30,	36,	1,	22091,	2761,	3 },/* Version 34 */
	{ 35,	157,	24649,	147,	45,		282,	1100,	46,	10,	1574,	30,	36,	1,	23008,	2876,	0 },/* Version 35 */
	{ 36,	161,	25921,	147,	45,		290,	1100,	46,	10,	1582,	30,	36,	1,	24272,	3034,	0 },/* Version 36 */
	{ 37,	165,	27225,	147,	45,		298,	1100,	46,	10,	1590,	30,	36,	1,	25568,	3196,	0 },/* Version 37 */
	{ 38,	169,	28561,	147,	45,		306,	1100,	46,	10,	1598,	30,	36,	1,	26896,	3362,	0 },/* Version 38 */
	{ 39,	173,	29929,	147,	45,		314,	1100,	46,	10,	1606,	30,	36,	1,	28256,	3532,	0 },/* Version 39 */
	{ 40,	177,	31329,	147,	45,		322,	1100,	46,	10,	1614,	30,	36,	1,	29648,	3706,	0 },/* Version 40 */
};

#if 0

typedef struct {
	int width;		//< Edge length of the symbol
	int words; 		//< Data capacity (bytes)
	int remainder;	//< Remainder bit (bits)
	int ec[4];  	//< Number of ECC code (bytes)
} QRspec_Capacity;
static const QRspec_Capacity qrspecCapacity[QRSPEC_VERSION_MAX + 1] = {
	{  0,    0, 0, {   0,    0,    0,    0}},
	{ 21,   26, 0, {   7,   10,   13,   17}}, // 1
	{ 25,   44, 7, {  10,   16,   22,   28}},
	{ 29,   70, 7, {  15,   26,   36,   44}},
	{ 33,  100, 7, {  20,   36,   52,   64}},
	{ 37,  134, 7, {  26,   48,   72,   88}}, // 5
	{ 41,  172, 7, {  36,   64,   96,  112}},
	{ 45,  196, 0, {  40,   72,  108,  130}},
	{ 49,  242, 0, {  48,   88,  132,  156}},
	{ 53,  292, 0, {  60,  110,  160,  192}},
	{ 57,  346, 0, {  72,  130,  192,  224}}, //10
	{ 61,  404, 0, {  80,  150,  224,  264}},
	{ 65,  466, 0, {  96,  176,  260,  308}},
	{ 69,  532, 0, { 104,  198,  288,  352}},
	{ 73,  581, 3, { 120,  216,  320,  384}},
	{ 77,  655, 3, { 132,  240,  360,  432}}, //15
	{ 81,  733, 3, { 144,  280,  408,  480}},
	{ 85,  815, 3, { 168,  308,  448,  532}},
	{ 89,  901, 3, { 180,  338,  504,  588}},
	{ 93,  991, 3, { 196,  364,  546,  650}},
	{ 97, 1085, 3, { 224,  416,  600,  700}}, //20
	{101, 1156, 4, { 224,  442,  644,  750}},
	{105, 1258, 4, { 252,  476,  690,  816}},
	{109, 1364, 4, { 270,  504,  750,  900}},
	{113, 1474, 4, { 300,  560,  810,  960}},
	{117, 1588, 4, { 312,  588,  870, 1050}}, //25
	{121, 1706, 4, { 336,  644,  952, 1110}},
	{125, 1828, 4, { 360,  700, 1020, 1200}},
	{129, 1921, 3, { 390,  728, 1050, 1260}},
	{133, 2051, 3, { 420,  784, 1140, 1350}},
	{137, 2185, 3, { 450,  812, 1200, 1440}}, //30
	{141, 2323, 3, { 480,  868, 1290, 1530}},
	{145, 2465, 3, { 510,  924, 1350, 1620}},
	{149, 2611, 3, { 540,  980, 1440, 1710}},
	{153, 2761, 3, { 570, 1036, 1530, 1800}},
	{157, 2876, 0, { 570, 1064, 1590, 1890}}, //35
	{161, 3034, 0, { 600, 1120, 1680, 1980}},
	{165, 3196, 0, { 630, 1204, 1770, 2100}},
	{169, 3362, 0, { 660, 1260, 1860, 2220}},
	{173, 3532, 0, { 720, 1316, 1950, 2310}},
	{177, 3706, 0, { 750, 1372, 2040, 2430}} //40
};



PRIVATE CONST UINT32 rs_block_num[QR_VERSION_MAX+1][QR_ECLEVEL_MAX] = {
	{0	,0	,0	,0	},	/* dummy */
	{1	,1	,1	,1	},	/* Version 1  */
	{1	,1	,1	,1	},	/* Version 2  */
	{1	,1	,2	,2	},	/* Version 3  */
	{1	,2	,2	,4	},	/* Version 4  */
	{1	,2	,4	,4	},	/* Version 5  */
	{2	,4	,4	,4	},	/* Version 6  */
	{2	,4	,6	,5	},	/* Version 7  */
	{2	,4	,6	,6	},	/* Version 8  */
	{2	,5	,8	,8	},	/* Version 9  */
	{4	,5	,8	,8	},	/* Version 10 */
	{4	,5	,8	,11	},	/* Version 11 */
	{4	,8	,10	,11	},	/* Version 12 */
	{4	,9	,12	,16	},	/* Version 13 */
	{4	,9	,16	,16	},	/* Version 14 */
	{6	,10	,12	,18	},	/* Version 15 */
	{6	,10	,17	,16	},	/* Version 16 */
	{6	,11	,16	,19	},	/* Version 17 */
	{6	,13	,18	,21	},	/* Version 18 */
	{7	,14	,21	,25	},	/* Version 19 */
	{8	,16	,20	,25	},	/* Version 20 */
	{8	,17	,23	,25	},	/* Version 21 */
	{9	,17	,23	,34	},	/* Version 22 */
	{9	,18	,25	,30	},	/* Version 23 */
	{10	,20	,27	,32	},	/* Version 24 */
	{12	,21	,29	,35	},	/* Version 25 */
	{12	,23	,34	,37	},	/* Version 26 */
	{12	,25	,34	,40	},	/* Version 27 */
	{13	,26	,35	,42	},	/* Version 28 */
	{14	,28	,38	,45	},	/* Version 29 */
	{15	,29	,40	,48	},	/* Version 30 */
	{16	,31	,43	,51	},	/* Version 31 */
	{17	,33	,45	,54	},	/* Version 32 */
	{18	,35	,48	,57	},	/* Version 33 */
	{19	,37	,51	,60	},	/* Version 34 */
	{19	,38	,53	,63	},	/* Version 35 */
	{20	,40	,56	,66	},	/* Version 36 */
	{21	,43	,59	,70	},	/* Version 37 */
	{22	,45	,62	,74	},	/* Version 38 */
	{24	,47	,65	,77	},	/* Version 39 */
	{25	,49	,68	,81	},	/* Version 40 */
};
#endif

#ifdef __cplusplus
extern "C" {
#endif

void make_qr_code(char *pMsg, QR_MODE_N Mode, QR_ECLEVEL_N QRecLevel, int version );

#ifdef __cplusplus
}
#endif 






#endif /* __QR_MAKE__ */